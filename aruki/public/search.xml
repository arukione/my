<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[城院智能路由器]]></title>
    <url>%2Farukione.github.io%2F2019%2F08%2F26%2F%E5%9F%8E%E9%99%A2%E6%99%BA%E8%83%BD%E8%B7%AF%E7%94%B1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[度过了一年城院生活，宿舍最想吐槽的，就是网络了！一年400块钱，只有20M，还不稳定！？使用时间是早上6：00 ~ 晚上12：00，周末不断网，这个倒是没什么问题，每次使用都要登录dr认证页面和天翼认证页面，5分钟不连wifi就断开验证，要重新连接，这就很烦了。不能多个人连接，就算买了路由器，也只能连接3台设备，那我还买路由器干嘛？直接电脑连了网络放热点不好吗…超过连接数限制就会被强制注销，一段时间不能连接网络，关键是，不超限制，偶尔还被注销了。以上是吐槽，还好在师兄的研究下，推出了校园智能路由器，可以解决上面那些问题！(没错，我就是来帮忙宣传路由器的！反正你们打不到我…) 下面是校园智能路由器的宣传 校园智能路由器出售================还在为校园网天天手动验证而烦恼吗？还在为校园网只能连有限设备烦恼吗？莫得关系，这些都不是问题=================================智能路由器function①循环验证校园网，拒绝手动验证②可连接多台设备，③更多功能私聊我，详细为你解答=================================智能路由器将采用刷机级路由器同时采用集成多功能潘多拉固件两大殿堂级的碰撞给你最好的上网体验=================================智能路由器的两大版本①标准版：2.4G频率支持，usb接口，百兆端 口，小巧玲珑②pro版：独立型四天线，双核cpu，双频wifi512m内存，32m闪存，4lan，同时配备usb3.0接口欢迎联系咨询 附上师兄的联系方式： 微信号：jiehaobin]]></content>
  </entry>
  <entry>
    <title><![CDATA[路由器配置]]></title>
    <url>%2Farukione.github.io%2F2019%2F08%2F26%2F%E8%B7%AF%E7%94%B1%E5%99%A8%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[src/gz 18.12_core http://downloads.pangubox.com:6380/pandorabox/18.12/targets/ralink/mt7621/packagessrc/gz 18.12_base http://downloads.pangubox.com:6380/pandorabox/18.12/packages/mipsel_1004kc_dsp/basesrc/gz 18.12_lafite http://downloads.pangubox.com:6380/pandorabox/18.12/packages/mipsel_1004kc_dsp/lafitesrc/gz 18.12_luci http://downloads.pangubox.com:6380/pandorabox/18.12/packages/mipsel_1004kc_dsp/lucisrc/gz 18.12_mtkdrv http://downloads.pangubox.com:6380/pandorabox/18.12/packages/mipsel_1004kc_dsp/mtkdrvsrc/gz 18.12_newifi http://downloads.pangubox.com:6380/pandorabox/18.12/packages/mipsel_1004kc_dsp/newifisrc/gz 18.12_packages http://downloads.pangubox.com:6380/pandorabox/18.12/packages/mipsel_1004kc_dsp/packagessrc/gz 18.12_pear http://downloads.pangubox.com:6380/pandorabox/18.12/packages/mipsel_1004kc_dsp/pear opkg update opkg install curl opkg install php5 php5-mod-gd php5-mod-curl php5-mod-session php5-mod-pdo php5-mod-mcrypt php5-mod-mbstring php5-fastcgi php5-cgi php5-mod-ctype php5-mod-exif php5-mod-iconv php5-mod-json php5-mod-sockets php5-mod-sqlite3 php5-mod-tokenizer php5-mod-zip /etc/config/uhttpd 下配置php路径123456config uhttpd web list listen_http 0.0.0.0:88 option home /www option cgi_prefix /cgi-bin option index_page &quot;index.html index.php&quot; list interpreter &quot;.php=/usr/bin/php-cgi&quot; 重新加载 /etc/init.d/uhttpd restart 上传文件123test -&gt; www 权限yzm.php -&gt; wwwlogin1.sh -&gt; root 权限 在 /etc/crontabs/root 里设置定时任务1* * * * * /root/login1.sh 在 /etc/rc.local 设置开机启动1/www/test br-lan daemon]]></content>
  </entry>
  <entry>
    <title><![CDATA[Welcome]]></title>
    <url>%2Farukione.github.io%2F2019%2F07%2F11%2FWelcome%2F</url>
    <content type="text"><![CDATA[欢迎来到ARUKI’ BLOG,你可以在这里寻找对您有帮助的文章。目前博客仍在建设中，如果对本博客有任何意见，欢迎联系我并提出您的问题！！ Welcome to my blog! You can find articles that useful for you.At present, the blog is still under construction, if you have any comments on this blog, please contact me and raise your questions!! ようこそ ARUKI’ BLOG、ここで君の役に立つ文章を探すことができます。现在、ブログ建设中ですが、もしこのブログに何か意见があれば、私を连络して问题を提出してくだいさい! !]]></content>
  </entry>
  <entry>
    <title><![CDATA[Python程序打包成exe可执行文件]]></title>
    <url>%2Farukione.github.io%2F2019%2F06%2F02%2Fpython%E7%A8%8B%E5%BA%8F%E6%89%93%E5%8C%85%E6%88%90exe%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[本教程是使用Pyinstaller来将Python程序打包成exe可执行文件实现步骤：首先要安装Pyinstaller包，在命令行窗口使用pip指令就可以完成：pip install pyinstaller安装成功后就可以进行打包了首先在命令行进入要打包的python程序的目录下面接着使用 pyinstaller file.py 就可以打包了(file.py是指你要打包的python文件)这个指令也可以附带其他属性：-F 表示生成单个可执行文件 -D 创建一个目录，包含exe文件和依赖很多文件（默认选项） -w 表示去掉控制台窗口，这样执行exe文件的时候不会出现窗口，但会在后台运行，用命令行还是可以看见执行情况的 -c 使用控制台，无界面(默认)； -p 表示你自己自定义需要加载的类路径 -i 表示可执行文件的图标。例如我要生成一个带图标的exe文件，没有其他依赖文件的，那么就是使用指令：pyinstaller -F -i image.ico file.py （image.ico表示图标的路径，file.py表示要打包的python文件）打包后会生成dict文件夹和buid文件夹还有一个.spec文件，其中dict就是放置我们要的exe文件的文件夹，其他两个是生成exe文件的过程中的中间产物，可以删掉。pyinstaller打包的时候会自动把其他依赖的包和其他python文件引入，所以不用担心调用的问题。但是其他要使用到的文件并不会被添加进去，例如要使用的图片或者文档，所以要自己把文件添加到打包完的exe文件的目录下面相应的路径，否则会出现闪退或者文件执行失败。另外就是，如果py文件的编码是utf8，但是文件里面又有中文的话，那么使用windows的命令行打包会出现编码错误。解决的方法就是先使用chcp指令进入其他编码的命令行以下是几种常用的编码:GBK(一般情况下为默认编码) 936美国英语 437utf-8 65001在这里我们要使用utf-8的编码，所以使用命令:chcp 65001设置编码后再进行打包就不会出现编码错误的情况了 最后就是，第一次打包出来的程序经常会出现各种问题，建议在命令行执行exe文件，这样可以看到报错的内容，以便结合情况解决问题。]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[天翼校园网验证码识别]]></title>
    <url>%2Farukione.github.io%2F2019%2F05%2F25%2F%E5%A4%A9%E7%BF%BC%E6%A0%A1%E5%9B%AD%E7%BD%91%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB%2F</url>
    <content type="text"><![CDATA[本菜鸡能力有限，本文章主要目的是为了完成自动登录校园网，不是为了教学……依靠之前学的一个神经网络，尝试写一个识别天翼验证码的代码其实是为了破解那个不得不吐槽的校园网，不得不捣鼓的东西…… 如果不懂爬虫，神经网络的构造，梯度下降算法和反向传播算法，请先找资料学习相关知识，网上有很多讲解的文章，B站也有很多视频 首先训练神经网络需要一点训练数据，而且，写的那个神经网络也不是靠深度学习框架的，所以识别的时候是采取分别识别验证码里面的4个数字的方式。幸好，天翼的验证码里的数字，非常简单，没有那些奇奇怪怪的加工，每个数字都是一样的，所以训练数据也不用那么多。写一个爬虫抓取一下验证码图片，然后把图片分割一下，就可以得到训练数据了。因为验证码里面的数字都长得一样，这里我每个数字就只用了10张图片来训练 接下来是训练神经网络12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849class neuralNetwork(): # 初始化神经网络 def __init__(self): # 定义输入层节点数量 self.inputnodes = 13 * 9 # 定义隐藏层节点数量 self.hiddennodes = 300 # 定义输出层节点数量 self.outnodes = 10 # 随机初始化权重 self.input_hidden_weight = random.normal(0.0, pow(self.hiddennodes, -0.5), (self.hiddennodes, self.inputnodes)) self.hidden_out_weight = random.normal(0.0, pow(self.outnodes, -0.5), (self.outnodes, self.hiddennodes)) # 设置学习率 self.learning_rate = 0.1 # 定义激活函数 self.activation_function = lambda x: expit(x) def train(self, inputs, targets): &quot;&quot;&quot; :param inputs: 输入的图片数组 :param targets: 预测得到的结果 &quot;&quot;&quot; # 转化输入的数据 inputs = nparray(inputs, ndmin=2).T # 转化预测的数据 targets = nparray(targets, ndmin=2).T # 神经网络的识别结果 hidden_inputs = dot(self.input_hidden_weight, inputs) hidden_outputs = self.activation_function(hidden_inputs) out_inputs = dot(self.hidden_out_weight, hidden_outputs) final_outputs = self.activation_function(out_inputs) # 分配输出层、隐藏层的各节的损失值 out_error = targets - final_outputs hidden_error = dot(self.hidden_out_weight.T, out_error) # 更新权重 self.hidden_out_weight += self.learning_rate * dot((out_error * final_outputs * (1.0 - final_outputs)), hidden_outputs.T) self.input_hidden_weight += self.learning_rate * dot((hidden_error * hidden_outputs * (1.0 - hidden_outputs)), inputs.T) def query(self, inputs): inputs = nparray(inputs, ndmin=2).T hidden_inputs = dot(self.input_hidden_weight, inputs) hidden_outputs = self.activation_function(hidden_inputs) out_inputs = dot(self.hidden_out_weight, hidden_outputs) final_outputs = self.activation_function(out_inputs) max = argmax(final_outputs) return max 用这个类代表神经网络，激活函数是使用sigmoid函数,这个函数在python里面已经内置在scipy库里面了，直接调用scipy.special的expit()函数就可以了query函数是神经网络识别图片函数，train函数是训练神经网络的函数，训练时用的算法是梯度下降和反向传播。把分割的数字图片转化为numpy数据传入train方法就可以对神经网络进行训练。权重更新方式使用梯度下降算法来获取更优的权重以下是图片的转化函数12345678910111213141516171819202122232425262728293031323334353637def get_data(image, select): &quot;&quot;&quot; 转化图片数据 :param image: 图片 :param select: 0代表输入整张验证码，返回4个数字的3维numpy数组 1代表输入一个数字，返回一个2维的numpy数组 :return: data or imdata &quot;&quot;&quot; if select == 0: # 分割图片 numdata = [] number = image.crop((7, 3, 55, 16)).convert(&apos;L&apos;) num1 = number.crop((0, 0, 9, 13)) num2 = number.crop((13, 0, 22, 13)) num3 = number.crop((26, 0, 35, 13)) num4 = number.crop((39, 0, 48, 13)) numlist = [num1, num2, num3, num4] for num in numlist: two = num.convert(&apos;1&apos;) array = nparray(two) list = array.tolist() data = [] for l in list: for i in l: data.append(i) numdata.append(data) data = nparray(numdata) * 0.89 + 0.1 return data if select == 1: two = image.convert(&apos;1&apos;) array = nparray(two) list = array.tolist() data = [] for l in list: for i in l: data.append(i) imdata = nparray(data) * 0.89 + 0.1 return imdata 以下是我用到的训练函数12345678910111213141516def network_train(network): for ii in range(0, 11): for i in range(0, 10): image = Image.open(&quot;number/&quot; + str(i) + &quot;/&quot; + str(ii) + &quot;.jpg&quot;) inputs = get_data(image, 1) targes = zeros(10) + 0.1 targes[i] = 0.99 network.train(inputs, targes) try: os.remove(&apos;input_hidden_weight.txt&apos;) os.remove(&apos;hidden_out_weight.txt&apos;) print(&apos;重置权重文件&apos;) except: print(&apos;创建权重文件&apos;) savetxt(&quot;input_hidden_weight.txt&quot;, network.input_hidden_weight) savetxt(&quot;hidden_out_weight.txt&quot;, network.hidden_out_weight) 因为这个验证码很简单，所以我没打算分测试数据，把全部图片训练完，这个神经网络就可以调用query方法来识别验证码了。为了不用每次识别验证码都训练一次，我在把训练出来的模型的权重保存在文件里面，以便以后直接拿文件里面的模型来用。 代码文件、训练数据、模型权重文件，我都放在github里面 github代码链接：https://github.com/arukione/verification-code/tree/master/%E5%A4%A9%E7%BF%BC%E6%A0%A1%E5%9B%AD%E7%BD%91%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL安装到登陆的问题]]></title>
    <url>%2Farukione.github.io%2F2019%2F04%2F08%2FMySQL%E5%AE%89%E8%A3%85%E5%88%B0%E7%99%BB%E9%99%86%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[经过一晚上的折腾，我终于登陆进数据库了！！这期间遇到了不少问题，虽然网上有很多解决方案，但要找到适用的真的不容易，每个问题都花了很长时间去尝试那些指令，绕了很多弯路才解决。 端口冲突安装完遇到的第一个问题就是，没办法打开mysql服务，删了安装目录下的date文件夹重新用mysqld --initialize初始化，重新配置my.ini文件都没用。之后用mysqld --console查了错误信息发现了端口被占用了： [ERROR] Can’t start server: Bind on TCP/IP port: Address already in use[ERROR] Do you already have another mysqld server running on port: 3306 ? 因为我这边的命令行无法识别netstat -nltp|grep mysql，到后面才用netstat -aon|findstr 3306查到了占用3306端口的进程，记住了进程后面的PID号，用taskkil /f /pid 对应的PID号把进程给杀了才解决问题 无法登陆耗了一些时间后，我用net start mysql开启了数据库后，用mysql -uroot -密码尝试登陆，结果又报了一个这样的错误 mysql: [ERROR] mysql: unknown option ‘-R’. 于是用mysql -uroot -p后再输入密码,才知道原先输入密码前也要加个p，也就是mysql -uroot -p密码。但是接下来又报了一个错误 mysql: [Warning] Using a password on the command line interface can be insecure.ERROR 1045 (28000): Access denied for user ‘root‘@’localhost’ (using password: YES) 查了一下发现是密码错误，因为我输入的是安装时的密码，但是初始化的时候密码重置了，所以密码错了，所以我又绕了一次弯路，把date删了重新初始化了一遍，把初始化输出的临时密码记了下来 [Note] A temporary password is generated for root@localhost: TKk51x#bOi0S之后就可以成功登陆了 修改密码登陆后没办法使用其他语句，说是必须修改一下密码，而且自动生成的密码太难记了，我想改回自己的密码，但是在网上查了很多指令都用不成功，错误提示的ALTER USER语句也不知道怎么用，所以又上网馊了一下，还看了一下官方文档，总结就是看不懂【查到最后终于发现了一个可以用的语句 alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;password&#39;; 这下问题终于解决了，可以开始进一步学习了。 虽然遇到了很多问题，但是也知道了很多MySQL和命令行的语句，有些没派上用场就是了，至少折腾了一夜一些有用的语句都变熟悉了。]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>windows命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的学习旅程]]></title>
    <url>%2Farukione.github.io%2F2019%2F04%2F04%2F%E6%88%91%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%97%85%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[2018年加强自己对计算机的认识，更深层地去理解计算机的工作原理从C语言开始认识程序接下来是自己买了服务器搭建梯子，第一次接触脚本慢慢的听到了许多自己没接触过的东西，例如github、node.js、还有前端啊，但是自己都不知道是什么东西自己买了前端的书学习，知道了如何构建网站参与了wiki的建设，发现了更多自己不知道的知识和vultr的客服交流，开启了服务器25号端口学习java，认识到了面向对象2019年访问了HackOne网站，开始对网络安全产生兴趣接触linux系统学习了github，明白了github的作用和使用方法接触python，发现python的优点购买了域名，尝试搭建博客初次使用git和githubDesktop，并搭建了自己的博客用githubDesktop给博客做备份学习linux系统和python、java，开始接触数据库学习数据库和python使用python写一个爬虫，借了数据库的书进行进一步学习和练习学习AI，入门机器学习第一次写了一个可以识别数字的神经网络学习python数据结构接触网络和使用刷入固件的路由器七月暑假开始使用ubuntu系统进一步学习机器学习算法，入门TensorFlow深度学习框架学习卷积神经网络结构(CNN)学习对抗神经网络（DCGAN）使用tesra平台，尝试在系统用GPU训练网络，结果安装驱动的时候把ubuntu系统搞坏了（呜呜呜）开始使用debian系统]]></content>
      <categories>
        <category>学习旅程</category>
      </categories>
      <tags>
        <tag>编程学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习资源分享]]></title>
    <url>%2Farukione.github.io%2F2019%2F04%2F04%2F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB%2F</url>
    <content type="text"><![CDATA[我只想说虽然很有兴趣，但是学习深度学习太难了！！！ 所以在这里和大家分享点学习资源，希望能给学习机器学习、深度学习的小伙伴帮助。 B站机器学习视频： 上交ACM机器学习：https://www.bilibili.com/video/av58580135 吴恩达（Ng）机器学习：https://www.bilibili.com/video/av9912938 斯坦福 CS224n 自然语言处理：https://www.bilibili.com/video/av46216519 ApacheCN学习组织：https://github.com/apachecn/AiLearning 斯坦福 CS224n 自然语言处理中文笔记：https://github.com/apachecn/stanford-cs224n-notes-zh 知乎卷积神经网络讲解：https://zhuanlan.zhihu.com/c_141391545 神经网络&amp;CNN论文（需要翻墙）：http://cs231n.github.io/ 我把论文下载为压缩包，给国内的小伙伴们下载学习：maching learning.7z]]></content>
      <categories>
        <category>学习旅程</category>
      </categories>
      <tags>
        <tag>编程学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Hexo-NexT时遇到的问题]]></title>
    <url>%2Farukione.github.io%2F2019%2F03%2F29%2F%E4%BD%BF%E7%94%A8Hexo-NexT%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[部署到github显示的网页和本地测试的网页不一样之前设置了网页的背景图片还有側框的边角，同时添加了右上角的github跳转图标和阅读全文的设置。但是在在本地测试完，部署到github时，发现只有github图标和阅读全文的设置生效了，背景图片和边角设置没有体现出来。这是因为github部署的时候缓存加载比较慢，有时候要过一段时间才会显示出你想要的效果，用hexo clean清除一下public文件夹,再重新部署用hexo g -d部署一下，多刷新几次就行了。 生成了空白的html文件第一次遇到这个问题的时候，我是直接重新搭建了这个博客的，毕竟一直不知道怎么解决，明明上一步操作还是没问题的，下一步页面突然就崩溃了。后来这个博客又遇到了一次，好在我找到了解决方法：如果找不到index.html文件（在生成的public文件夹里面）的话，要先用npm ls --depth 0检查一下插件情况,如果插件缺失了deploy和generator这两个插件的话就要用npm install重新安装插件。如果是有html文件，但文件是空白的。那么你就要检查你刚刚修改的配置了，如果你修改一个文件里某一个配置下的某一项，但那一个配置忘记打开的话就会导致这样的情况。 例如我在主题配置文件里的友情链接links下增加了网易云音乐这一个选项，但是links前面原先有一个#号，我没有删除打开的话，生成的index.html文件就是空白的。而我就是遇到了这种情况，当时不知道是修改了哪一个配置，忘记把#号删了，结果就没有成功生成页面，发现了之后把#号删了就恢复正常了。 hexo语句发生错误 Template render error: (unknown path)在我写完另外一篇文章后，打算测试一下，发现无论是hexo g还是hexo s都会报错，于是移除了那篇文章，重新尝试了一下发现可以了。在网上看到似乎不能用}}这样的符号，我回去看那篇文章时发现我有一个}误删了，这才的导致解析不通过。结合之前生成空白html的经历，我发现只要文件里面有一点语法错误都会出现很大问题，如果某次操作突然出错了，记得去检查你最近的修改和文章有没有语法错误。 左下角多了一个undefined最新版本的看板娘，在layout/_layout.swig的&lt;/body&gt;前加上{ { live2d() } }，会产生一个默认的看板娘。如果在_config.yml文件中只设置一个，这就会产生冲突，导致有一个无法定义，所以会在页面多出一个undefined语句。在最新版本要把&lt;/body&gt;前的{ { live2d() } }删除，这样才不会出错。]]></content>
      <categories>
        <category>前端建设</category>
      </categories>
      <tags>
        <tag>博客建设</tag>
        <tag>Hexo-NexT</tag>
      </tags>
  </entry>
</search>
