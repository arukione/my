<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Welcome]]></title>
    <url>%2Farukione.github.io%2F2019%2F07%2F11%2FWelcome%2F</url>
    <content type="text"><![CDATA[欢迎来到ARUKI’ BLOG,你可以在这里寻找对您有帮助的文章。目前博客仍在建设中，如果对本博客有任何意见，欢迎联系我并提出您的问题！！ Welcome to my blog! You can find articles that useful for you.At present, the blog is still under construction, if you have any comments on this blog, please contact me and raise your questions!! ようこそ ARUKI’ BLOG、ここで君の役に立つ文章を探すことができます。现在、ブログ建设中ですが、もしこのブログに何か意见があれば、私を连络して问题を提出してくだいさい! !]]></content>
  </entry>
  <entry>
    <title><![CDATA[Python程序打包成exe可执行文件]]></title>
    <url>%2Farukione.github.io%2F2019%2F06%2F02%2Fpython%E7%A8%8B%E5%BA%8F%E6%89%93%E5%8C%85%E6%88%90exe%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[本教程是使用Pyinstaller来将Python程序打包成exe可执行文件实现步骤：首先要安装Pyinstaller包，在命令行窗口使用pip指令就可以完成：pip install pyinstaller安装成功后就可以进行打包了首先在命令行进入要打包的python程序的目录下面接着使用 pyinstaller file.py 就可以打包了(file.py是指你要打包的python文件)这个指令也可以附带其他属性：-F 表示生成单个可执行文件 -D 创建一个目录，包含exe文件和依赖很多文件（默认选项） -w 表示去掉控制台窗口，这样执行exe文件的时候不会出现窗口，但会在后台运行，用命令行还是可以看见执行情况的 -c 使用控制台，无界面(默认)； -p 表示你自己自定义需要加载的类路径 -i 表示可执行文件的图标。例如我要生成一个带图标的exe文件，没有其他依赖文件的，那么就是使用指令：pyinstaller -F -i image.ico file.py （image.ico表示图标的路径，file.py表示要打包的python文件）打包后会生成dict文件夹和buid文件夹还有一个.spec文件，其中dict就是放置我们要的exe文件的文件夹，其他两个是生成exe文件的过程中的中间产物，可以删掉。pyinstaller打包的时候会自动把其他依赖的包和其他python文件引入，所以不用担心调用的问题。但是其他要使用到的文件并不会被添加进去，例如要使用的图片或者文档，所以要自己把文件添加到打包完的exe文件的目录下面相应的路径，否则会出现闪退或者文件执行失败。另外就是，如果py文件的编码是utf8，但是文件里面又有中文的话，那么使用windows的命令行打包会出现编码错误。解决的方法就是先使用chcp指令进入其他编码的命令行以下是几种常用的编码:GBK(一般情况下为默认编码) 936美国英语 437utf-8 65001在这里我们要使用utf-8的编码，所以使用命令:chcp 65001设置编码后再进行打包就不会出现编码错误的情况了 最后就是，第一次打包出来的程序经常会出现各种问题，建议在命令行执行exe文件，这样可以看到报错的内容，以便结合情况解决问题。]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[天翼校园网验证码识别]]></title>
    <url>%2Farukione.github.io%2F2019%2F05%2F25%2F%E5%A4%A9%E7%BF%BC%E6%A0%A1%E5%9B%AD%E7%BD%91%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB%2F</url>
    <content type="text"><![CDATA[依靠之前学的一个神经网络，尝试写一个识别天翼验证码的代码 github代码链接在文章末尾 其实是为了破解那个不得不吐槽的校园网，不得不捣鼓的东西…… 首先训练神经网络需要一点训练数据，而且，写的那个神经网络也不是靠深度学习框架的，所以识别的时候是采取分别识别验证码里面的4个数字的方式。幸好，天翼的验证码里的数字，非常简单，没有那些奇奇怪怪的加工，每个数字都是一样的，所以训练数据也不用那么多。写一个爬虫抓取一下验证码图片，然后把图片分割一下，就可以得到训练数据了。因为验证码里面的数字都长得一样，这里我每个数字就只用了10张图片来训练 接下来是训练神经网络12345678910111213141516171819202122232425262728293031323334class neuralNetwork(): def __init__(self): self.inputnodes = 13 * 9 self.hiddennodes = 300 self.outnodes = 10 self.input_hidden_weight = random.normal(0.0, pow(self.hiddennodes, -0.5), (self.hiddennodes, self.inputnodes)) self.hidden_out_weight = random.normal(0.0, pow(self.outnodes, -0.5), (self.outnodes, self.hiddennodes)) self.learning_rate = 0.1 self.activation_function = lambda x: expit(x) def train(self, inputs, targets): inputs = nparray(inputs, ndmin=2).T targets = nparray(targets, ndmin=2).T hidden_inputs = dot(self.input_hidden_weight, inputs) hidden_outputs = self.activation_function(hidden_inputs) out_inputs = dot(self.hidden_out_weight, hidden_outputs) final_outputs = self.activation_function(out_inputs) # 更新权重 out_error = targets - final_outputs hidden_error = dot(self.hidden_out_weight.T, out_error) self.hidden_out_weight += self.learning_rate * dot((out_error * final_outputs * (1.0 - final_outputs)), hidden_outputs.T) self.input_hidden_weight += self.learning_rate * dot((hidden_error * hidden_outputs * (1.0 - hidden_outputs)), inputs.T) def query(self, inputs): inputs = nparray(inputs, ndmin=2).T hidden_inputs = dot(self.input_hidden_weight, inputs) hidden_outputs = self.activation_function(hidden_inputs) out_inputs = dot(self.hidden_out_weight, hidden_outputs) final_outputs = self.activation_function(out_inputs) max = argmax(final_outputs) return max 用这个类代表神经网络，激活函数是使用figmoid函数直接调用了scipy库的special里面的expit()函数。query函数是识别函数，train函数是训练函数，训练时用的算法是梯度下降和反向传播。把分割的数字图片转化为numpy数据传入train方法就可以对神经网络进行训练。以下是图片的转化函数123456789101112131415161718192021222324252627282930313233343536def get_data(image, select): &quot;&quot;&quot; 转化图片数据 :param image: 图片 :param select: 0代表输入整张验证码，返回4个数字的3维numpy数组 1代表输入一个数字，返回一个2维的numpy数组 :return: data or imdata &quot;&quot;&quot; if select == 0: numdata = [] number = image.crop((7, 3, 55, 16)).convert(&apos;L&apos;) num1 = number.crop((0, 0, 9, 13)) num2 = number.crop((13, 0, 22, 13)) num3 = number.crop((26, 0, 35, 13)) num4 = number.crop((39, 0, 48, 13)) numlist = [num1, num2, num3, num4] for num in numlist: two = num.convert(&apos;1&apos;) array = nparray(two) list = array.tolist() data = [] for l in list: for i in l: data.append(i) numdata.append(data) data = nparray(numdata) * 0.89 + 0.1 return data if select == 1: two = image.convert(&apos;1&apos;) array = nparray(two) list = array.tolist() data = [] for l in list: for i in l: data.append(i) imdata = nparray(data) * 0.89 + 0.1 return imdata 以下是我用到的训练函数12345678910111213141516def network_train(network): for ii in range(0, 11): for i in range(0, 10): image = Image.open(&quot;number/&quot; + str(i) + &quot;/&quot; + str(ii) + &quot;.jpg&quot;) inputs = get_data(image, 1) targes = zeros(10) + 0.1 targes[i] = 0.99 network.train(inputs, targes) try: os.remove(&apos;input_hidden_weight.txt&apos;) os.remove(&apos;hidden_out_weight.txt&apos;) print(&apos;重置权重文件&apos;) except: print(&apos;创建权重文件&apos;) savetxt(&quot;input_hidden_weight.txt&quot;, network.input_hidden_weight) savetxt(&quot;hidden_out_weight.txt&quot;, network.hidden_out_weight) 因为这个验证码很简单，所以我没打算分测试数据，把全部图片训练完，这个神经网络就可以调用query方法来识别验证码了。为了不用每次识别验证码都训练一次，我在把训练出来的模型的权重保存在文件里面，以便以后直接拿文件里面的模型来用。 代码文件、训练数据、模型权重文件，我都放在github里面 github代码链接：https://github.com/arukione/verification-code/tree/master/%E5%A4%A9%E7%BF%BC%E6%A0%A1%E5%9B%AD%E7%BD%91%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL安装到登陆的问题]]></title>
    <url>%2Farukione.github.io%2F2019%2F04%2F08%2FMySQL%E5%AE%89%E8%A3%85%E5%88%B0%E7%99%BB%E9%99%86%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[经过一晚上的折腾，我终于登陆进数据库了！！这期间遇到了不少问题，虽然网上有很多解决方案，但要找到适用的真的不容易，每个问题都花了很长时间去尝试那些指令，绕了很多弯路才解决。 端口冲突安装完遇到的第一个问题就是，没办法打开mysql服务，删了安装目录下的date文件夹重新用mysqld --initialize初始化，重新配置my.ini文件都没用。之后用mysqld --console查了错误信息发现了端口被占用了： [ERROR] Can’t start server: Bind on TCP/IP port: Address already in use[ERROR] Do you already have another mysqld server running on port: 3306 ? 因为我这边的命令行无法识别netstat -nltp|grep mysql，到后面才用netstat -aon|findstr 3306查到了占用3306端口的进程，记住了进程后面的PID号，用taskkil /f /pid 对应的PID号把进程给杀了才解决问题 无法登陆耗了一些时间后，我用net start mysql开启了数据库后，用mysql -uroot -密码尝试登陆，结果又报了一个这样的错误 mysql: [ERROR] mysql: unknown option ‘-R’. 于是用mysql -uroot -p后再输入密码,才知道原先输入密码前也要加个p，也就是mysql -uroot -p密码。但是接下来又报了一个错误 mysql: [Warning] Using a password on the command line interface can be insecure.ERROR 1045 (28000): Access denied for user ‘root‘@’localhost’ (using password: YES) 查了一下发现是密码错误，因为我输入的是安装时的密码，但是初始化的时候密码重置了，所以密码错了，所以我又绕了一次弯路，把date删了重新初始化了一遍，把初始化输出的临时密码记了下来 [Note] A temporary password is generated for root@localhost: TKk51x#bOi0S之后就可以成功登陆了 修改密码登陆后没办法使用其他语句，说是必须修改一下密码，而且自动生成的密码太难记了，我想改回自己的密码，但是在网上查了很多指令都用不成功，错误提示的ALTER USER语句也不知道怎么用，所以又上网馊了一下，还看了一下官方文档，总结就是看不懂【查到最后终于发现了一个可以用的语句 alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;password&#39;; 这下问题终于解决了，可以开始进一步学习了。 虽然遇到了很多问题，但是也知道了很多MySQL和命令行的语句，有些没派上用场就是了，至少折腾了一夜一些有用的语句都变熟悉了。]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>windows命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的学习旅程]]></title>
    <url>%2Farukione.github.io%2F2019%2F04%2F04%2F%E6%88%91%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%97%85%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[2018年加强自己对计算机的认识，更深层地去理解计算机的工作原理从C语言开始认识程序接下来是自己买了服务器搭建梯子，第一次接触脚本慢慢的听到了许多自己没接触过的东西，例如github、node.js、还有前端啊，但是自己都不知道是什么东西自己买了前端的书学习，知道了如何构建网站参与了wiki的建设，发现了更多自己不知道的知识和vultr的客服交流，开启了服务器25号端口学习java，认识到了面向对象2019年访问了HackOne网站，开始对网络安全产生兴趣接触linux系统学习了github，明白了github的作用和使用方法接触python，发现python的优点购买了域名，尝试搭建博客初次使用git和githubDesktop，并搭建了自己的博客用githubDesktop给博客做备份学习linux系统和python、java，开始接触数据库学习数据库和python使用python写一个爬虫，借了数据库的书进行进一步学习和练习学习AI，入门机器学习第一次写了一个可以识别数字的神经网络学习python数据结构接触网络和使用刷入固件的路由器七月暑假开始使用ubuntu系统进一步学习机器学习算法，入门TensorFlow深度学习框架]]></content>
      <categories>
        <category>学习旅程</category>
      </categories>
      <tags>
        <tag>编程学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Hexo-NexT时遇到的问题]]></title>
    <url>%2Farukione.github.io%2F2019%2F03%2F29%2F%E4%BD%BF%E7%94%A8Hexo-NexT%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[部署到github显示的网页和本地测试的网页不一样之前设置了网页的背景图片还有側框的边角，同时添加了右上角的github跳转图标和阅读全文的设置。但是在在本地测试完，部署到github时，发现只有github图标和阅读全文的设置生效了，背景图片和边角设置没有体现出来。这是因为github部署的时候缓存加载比较慢，有时候要过一段时间才会显示出你想要的效果，用hexo clean清除一下public文件夹,再重新部署用hexo g -d部署一下，多刷新几次就行了。 生成了空白的html文件第一次遇到这个问题的时候，我是直接重新搭建了这个博客的，毕竟一直不知道怎么解决，明明上一步操作还是没问题的，下一步页面突然就崩溃了。后来这个博客又遇到了一次，好在我找到了解决方法：如果找不到index.html文件（在生成的public文件夹里面）的话，要先用npm ls --depth 0检查一下插件情况,如果插件缺失了deploy和generator这两个插件的话就要用npm install重新安装插件。如果是有html文件，但文件是空白的。那么你就要检查你刚刚修改的配置了，如果你修改一个文件里某一个配置下的某一项，但那一个配置忘记打开的话就会导致这样的情况。 例如我在主题配置文件里的友情链接links下增加了网易云音乐这一个选项，但是links前面原先有一个#号，我没有删除打开的话，生成的index.html文件就是空白的。而我就是遇到了这种情况，当时不知道是修改了哪一个配置，忘记把#号删了，结果就没有成功生成页面，发现了之后把#号删了就恢复正常了。 hexo语句发生错误 Template render error: (unknown path)在我写完另外一篇文章后，打算测试一下，发现无论是hexo g还是hexo s都会报错，于是移除了那篇文章，重新尝试了一下发现可以了。在网上看到似乎不能用}}这样的符号，我回去看那篇文章时发现我有一个}误删了，这才的导致解析不通过。结合之前生成空白html的经历，我发现只要文件里面有一点语法错误都会出现很大问题，如果某次操作突然出错了，记得去检查你最近的修改和文章有没有语法错误。 左下角多了一个undefined最新版本的看板娘，在layout/_layout.swig的&lt;/body&gt;前加上{ { live2d() } }，会产生一个默认的看板娘。如果在_config.yml文件中只设置一个，这就会产生冲突，导致有一个无法定义，所以会在页面多出一个undefined语句。在最新版本要把&lt;/body&gt;前的{ { live2d() } }删除，这样才不会出错。]]></content>
      <categories>
        <category>前端建设</category>
      </categories>
      <tags>
        <tag>博客建设</tag>
        <tag>Hexo-NexT</tag>
      </tags>
  </entry>
</search>
