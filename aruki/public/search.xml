<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[强类型与动态类型的Python]]></title>
    <url>%2Farukione.github.io%2F2019%2F11%2F10%2F%E5%BC%BA%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%8A%A8%E6%80%81%E7%B1%BB%E5%9E%8B%E7%9A%84%2F</url>
    <content type="text"><![CDATA[很多人都会说到Python是一门强类型、动态类型的语言，为什么这么说呢？我们先来看一下什么是强类型的语言百度答案：强类型指的是程序中表达的任何对象所从属的类型都必须能在编译时刻确定。什么意思呢？就是说，在编译的时候，变量的类型就可以被编译器确定，并且运行时该变量不经过强制转换将类型无法发生改变。例如我在Python里面定义了两个不同类型的变量，然后对这两个变量进行以下操作123a = 1b = "b"a + b就会报如下的类型错误(TypeError)因为a和b是两个不同类型的变量，在不可以进行赋值操作，但是在C语言里面是可以的，因为会进行隐式转换，而在Python里面不会进行类型隐式转换。对于Python来说，变量不通过int()或str()等方法进行转换的话，那么该变量的类型将无法发生改变根据百度提供的信息可以了解到：强类型是针对类型检查的严格程度而言的，它指任何变量在使用的时候必须要指定这个变量的类型，而且在程序的运行过程中这个变量只能存储这个类型的数据。但是我们在用Python的时候就会知道，我们是可以给变量赋其它类型的值的，例如我们可以这样写1234a = 1a = Falseb = "b"a = b这不是和强类型的定义发生冲突了吗？其实这涉及到我们要讲的另外一个问题，动态类型。为什么说Python是动态类型呢？因为Python的变量并不是指定了类型的，Python的变量在进行赋值的时候，是指向了对象的地址，在进行重新赋值的时候，Python变量并不关心值的类型，因为它只是改变了地址的指向。这种赋值方式报错导致的类型错误，都是在运行的时候才会发生，包括上面举的例子的。在编译的时候不对变量类型进行识别，在运行的时候可以改变其结构的语言，我们称为动态语言。因为Python的这个特性，所以可以抛开强类型语言对于赋值时类型的要求，但是在运行时会对变量指向地址的值的类型进行判别。这就是Python既是动态类型语言，也是强类型语言的原因。对于Python这种动态指向，在编写程序的时候，给我们带来了很多方便，但是稍不注意，也会让程序发生一些难以察觉的错误。例如我们对列表操作的时候当Python将一个列表赋给变量a，此时a并不等于[1,2,3]，而是指向了这个列表的地址。将a的值赋给b的时候，相当于将b的指向修改成a的指向，也就是b也是指向这个列表的地址。当你对b进行操作的时候，就是在对这个地址的值进行操作，所以a的值也会发生改变，当程序在递归或者用树遍历的时候，如果这样进行列表的赋值，将会导致重大的错误。为了避免这种情况，Python也提供了一些方法给我们进行赋值使用，当我们希望将a和b不是指向同一个列表，但两个列表的值又要一样的时候，我们可以用list的copy()方法来对列表进行复制。这种情况下我们是复制出了一个新的列表赋给了b，所以对b操作的时候不会改变a的值。另外一种方法就是直接对整个列表进行截取：当我们使用a[x:y]时，可以截取到a中下标x到下标y的片段；当x或y的参数放空时，表示从头开始截取或者截取到尾；例：a[:y]就是截取下标0~y的片段，a[x:]就是从x开始截取到列表结束；而a[:]就是从头截取到最后一个元素，也就是整个列表都截取下来。或者是对多维列表的子列表进行修改但是这两个方法对于多维列表操作单个元素来说，都不起作用！原因是：列表里面保存的元素，也是地址的指向！当对多维列表的下一级列表进行操作的时候，是让该下标指向了另一个列表的地址，但是对该子列表的元素进行修改时，是修改子列表的元素的指向。附上图可能会更容易理解一点：例如：我将a复制给了b，虽然生成的是新列表，但是列表里面元素指向的地址是相同的，当我修改b[0]的时候，相当于是把b[0]指向了其它列表，此时a并不会收到影响。但是如果我修改的是b[1][1],此时我修改的是b[1]指向的列表下标为1的元素，但是a[1]和b[1]指向的是同一列表，相当于也是在修改a[1]的元素。这种情况下，也有应对的方法，我用的是for循环来进行重复制1234a = [[1,1,1],[1,1,1],[1,1,1]]b = []for data in a: b.append(data.copy())但是这种办法对于对于n维列表，需要内嵌的for循环为n-1个，如果是维度高的列表，就不是很切实际了。如果大佬们有更好的方法，还请在评论区留言^_^掘金地址：https://juejin.im/post/5dc7a58b51882521f62cc3c2知乎地址：https://zhuanlan.zhihu.com/p/91117079]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>-编程学习 -Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用树结构获取字符排列组合]]></title>
    <url>%2Farukione.github.io%2F2019%2F11%2F10%2F%E7%94%A8%E6%A0%91%E7%BB%93%E6%9E%84%E8%8E%B7%E5%8F%96%E5%AD%97%E7%AC%A6%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88%2F</url>
    <content type="text"><![CDATA[假如有一串字符串，要对字符串里所有字符进行排列，列出所有排列组合的可能对于这种获取所有可能性的问题我第一想到的就是用树结构来实现，显然这个问题不能用二叉树，那我们就不用二叉树了，反正也没要求一定要用(hhhhh)对于这种问题，我们知道遍历到最后的树叶就是其中的一种结果，所以我们定义一个全局列表来储存全部树叶的结果。对于这个问题，并没有所谓的树根，树的开头就是所有可能的第一个字符。所以我们定义一个树的类来对第一次传入节点进行操作；定义一个节点类来作为树节点，并直接把向下添加的节点写在构造函数里面，只要符合要求就一直向下传入节点，直到全部字符都遍历完，到达树叶的时候将该结果存储起来。12345678910111213141516171819202122232425262728293031323334353637# 存储树叶结果result = []# 树结构class Tree: def __init__(self,strings): # 树根节点 self.nodes = [] if strings != []: for index in range(0,len(strings)): # 把字符传入节点 node = Node(index,strings[index],strings) # 添加子节点到树根 self.nodes.append(node)# 节点结构class Node: def __init__(self,index,string,strings): # 树节点的值 self.value = string # 树节点的子节点 self.nodes = [] # 复制新的字符列表 self.strings = strings[:] # 将已拼接入节点值的字符从字符列表里删除 self.strings.pop(index) # 如果字符列表为空，则结束添加节点，将当前树叶节点保存的值存进result if len(self.strings) == 0: result.append(self.value) # 不为空，继续将字符存入新节点添加到当前节点的子节点中 else: for i in range(0,len(self.strings)): node = Node(i,self.value+self.strings[i],self.strings) self.nodes.append(node)以下是执行的主方法先从键盘获取字符串，再将字符串转成列表以便进行遍历，然后将字符列表传入树进行操作最后按照不同字符开头分段打印出结果123456789if __name__ == "__main__": string = str(input()) strings = list(string) tree = Tree(strings) for i in range(0,len(strings)): length = int(len(result)/len(strings)) print(result[i*length:i*length+length])对于遍历所有可能的问题，树结构往往会是我第一考虑的解决方法，因为这种结构基本可以将需要的可能都列出来，即使会有累赘的元素，但是所有可能往往都可以很好的列出来，实现起来也很方便。有问题反馈请在评论区留言。GitHub源代码链接：https://github.com/arukione/PythonLearning]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>-编程学习 -数据结构 -Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用树结构获取自然数拆分结果]]></title>
    <url>%2Farukione.github.io%2F2019%2F11%2F10%2F%E7%94%A8%E6%A0%91%E7%BB%93%E6%9E%84%E8%8E%B7%E5%8F%96%E8%87%AA%E7%84%B6%E6%95%B0%E6%8B%86%E5%88%86%E7%BB%93%E6%9E%9C%2F</url>
    <content type="text"><![CDATA[任何一个大于1的自然数n，都可以拆分成若干个小于n的自然数相加，现在输入一个数n，列出该数的所有拆分可能像这种获取所有可能性的问题，我第一想到的当然是树啦！好吧，这次其实我第一次想到的不是树，而是for循环，其实就是被那么规律的排列给误导了….但是最后还是靠树来实现了不过这一次的问题没定义Tree类了，直接定义了Node类传入列表进行计算存储。其实这个问题就是从1到n-1开始遍历，将遍历到的数存到列表里面，每次存完1个数将列表传入下一个节点，再从1开始存，直到列表的和等于n的值，把这个列表进行排序然后存入全局列表result里面，最后再打印出来。以下是实现代码123456789101112131415161718192021222324252627282930313233343536373839# 储存结果result = []# 定义全局变量nn=0class Node: def __init__(self,num_list): # 计算列表里值的和 list_sum = sum(num_list) # 遍历1到当前可储存的最大值 for i in range(1,n-list_sum+1): # 复制已存储自然数的列表 new_num_list = num_list[:] # 将可存储的值添加进列表 new_num_list.append(i) # 如果添加新值后列表里全部元素的和等于n，则该节点为尾节点 if list_sum+i == n: # 判断存的自然数是否全都小于n if len(new_num_list)!=1: # 对存储的自然数进行排序 new_num_list.sort() # 判断该结果是否已存在 if new_num_list not in result: result.append(new_num_list) # 如果不是尾节点，继续添加节点 if list_sum+i &lt; n: Node(new_num_list)if __name__ == "__main__": print("Enter a number greater than two") # 设置n的值 n = int(input()) # 开始拆分 num_list = [] Node(num_list) # 展示结果 for i in result: print(i)其实无论是拆分还是组合，只要是求全部可能性的问题，用树结构都可以很好的解决，如果有其它问题请在评论区留言。附上GitHub代码链接：https://github.com/arukione/PythonLearning]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>-编程学习 -数据结构 -Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Welcome]]></title>
    <url>%2Farukione.github.io%2F2019%2F09%2F15%2FWelcome%2F</url>
    <content type="text"><![CDATA[欢迎来到ARUKI’ BLOG,你可以在这里寻找对您有帮助的文章。目前博客仍在建设中，如果对本博客有任何意见，欢迎联系我并提出您的问题！！Welcome to my blog! You can find articles that useful for you.At present, the blog is still under construction, if you have any comments on this blog, please contact me and raise your questions!!ようこそ ARUKI’ BLOG、ここで君の役に立つ文章を探すことができます。现在、ブログ建设中ですが、もしこのブログに何か意见があれば、私を连络して问题を提出してくだいさい! !]]></content>
  </entry>
  <entry>
    <title><![CDATA[数据结构基础]]></title>
    <url>%2Farukione.github.io%2F2019%2F09%2F11%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[基本概念和术语数据(Data)：客观事物的符号表示，是所有能输入到计算机中并被计算机程序处理的符号的总称数据元素(Data Element)：数据的基本单位，在计算机中通常作为一个整体进行考虑和处理数据项(Data Item)：组成数据元素的、有独立含义的、不可分割的最小单位数据对象(Data Object)：是性质相同的数据元素的集合，是数据的一个子集数据是什么？如何理解数据对象？什么是性质相同的数据元素的集合？数据对象相当于数据的一部分内容，而这部分内容里面的元素都有相同的特点，举个例子：数据 一个班级里面的学生数据对象 一个班里学生的信息表数据元素 学生信息表的每一条数据都是数据元素数据项 学生信息表里面的每一项信息这里面，学生的信息表是学生的一个部分内容，学生可以包含很多内容，除了信息表，还有成绩单，身份内容，这些都算是学生这个数据的一部分，也就是数据的子集，即数据对象。而学生信息表里面会含有很多个信息项，例如姓名学号、专业、性别等等，这些信息项就是数据项，有着独立的含义。信息表里面的每一个学生的数据，都算是一个数据元素，这些学生的数据构和数据项构造成了信息表，所以数据对象是数据元素的集合。数据结构数据结构(Data Stucture)：是相互之间存在一种或多种特定关系的数据元素的集合。数据结构其实就是带有“结构”的数据元素的集合。不过说是数据元素的集合，我们平时的理解更多的是倾向于结构，学得主要也是结构，但这个名词本身指的还是集合！数据结构包括逻辑结构和储存结构两个层次。逻辑结构逻辑结构是对于数据来讲的，从逻辑关系上描述数据，和数据的储存无关，独立于计算机。数据的逻辑结构分为：线性结构和非线性结构。四类基本逻辑结构：集合结构：数据元素除了属于同一集合外，没有其他关系线性结构：数据元素之间存在一对一的关系树结构：数据元素之间存在一对多的关系图结构或网状结构：数据元素之间存在多对多的关系下面图示，会更容易理解储存结构储存结构也称为物理结构，指的是数据对象在计算机中的存储方式。通常要求数据对象在存入计算机时既要存储数据元素的数据，也要存储数据元素之间的逻辑关系，数据元素在计算机内用一个结点来表示。数据元素在计算机中的两种基本储存结构：顺序存储结构：借助元素在存储器中的相对位置来表示数据元素之间的逻辑关系，要求所有的元素依次存放在一片连续的存储空间中链式存储结构：无需占用一整块存储空间，为了表示结点之间的关系，给每个结点附加指针字段，用于存放后继元素的存储地址。1234课外补充：逻辑结构与数据元素本身的形式、内容、相对位置、个数无关。一些表面上很不相同的数据可以有相同的逻辑结构通常要求同一逻辑结构中的所有数据元素具有相同的特性，这意味着不仅数据元素所包含的数据项的个数要相同，而且对应数据项的类型要一致算法和算法分析算法：是为了解决某类问题而规定的一个有限长的操作序列一个算法必须满足的五个重要特征：有穷性、确定性、可行性、输入、输出。一个算法的优劣评价的方面：正确性、可读性、健壮性、高效性。高效性包括时间和空间两个方面：时间高效是指算法设计合理，执行效率高，可以用时间复杂度来度量空间高效是指算法占用存储容量合理，可以用空间复杂度来度量时间复杂度和空间复杂度是衡量算法的两个主要指标。衡量算法效率的方法主要有两种：事后统计法和事前分析估算法。通常采用事前分析估算法，通过计算算法的渐进复杂度来衡量算法的效率。渐进时间复杂度一般情况下对于算法中基本语句的执行的是问题规模n的某个函数f(n)，我们用”O”来表示数量级，算法的时间量度记作T(n) = O(f(n))它表示随问题规模n的增大，算法执行时间的增长率和 f(n) 的增长率相同，称做算法的渐渐时间复杂度，简称时间复杂度(Time Complexity).问题规模：问题规模是算法求解问题输入量的多少，是问题大小的本质表示，一般用整数n表示语句频度：一条语句的重复执行次数「 以下代码来自书中 」一个算法的执行时间大致上等于所有语句执行时间的总和，而语句的执行时间则为该条语句的财富执行次数和执行一次所需时间的乘积。1234567891011两个n阶矩阵的乘积算法设每条语句执行一次所需时间均为单位时间，n为执行规模for(i=1; i&lt;=n; i++) //频度为 n+1 for(j=1; j&lt;=n; j++)&#123; //频度为 n*(n+1) c[i][j] = 0; //频度为 n^2 for(k=1; k&lt;=n; k++) //频度为 n^2 * (n+1) c[i][j] = c[i][j] + a[i][k] * b[k][j]; //频度为 n^3 &#125;该算法中所有语句频度的和 f(n) = 2n^3 + 3n^2 + 2n + 1为了客观反映一个算法的执行时间，可以通过算法中“基本语句”(重复执行次数和算法的执行时间成正比的语句，它对算法运行时间的贡献最大) 执行次数来度量算法的工作量。通常，算法的执行时间随问题规模增长而增长，因此对算法的评价只需考虑其随问题规模增长的趋势。12345上面那个例子,当执行规模n趋向无穷大时f(n) / n^3 的极限等于2也就是当n充分大时，f(n) 和 n^3 的比是一个不等于0的常数即 f(n) 和 n^3 同阶(数量级Order of Magnitude相同)时间复杂度T(n) = O(f(n)) = O(n^3)1234567891011121314151617181920212223242526272829303132关于常量阶当语句频度为1时，算法执行时间是一个与问题规模n无关的常数，即T(n) = O(1)，称为常量阶。只要算法执行时间不随问题规模n增长而增长，算法中语句的频度就是某个常数，无论这个常数多大，算法的时间复杂度都是O(1)。例如：for(i=0;i&lt;10000;i++)&#123;x++;s=0;&#125;关于线性阶循环体内两条基本语句的频度均为 f(n)=n，算法的时间复杂度为 T(n) = O(n)，称为线性阶。当算法的基本语句频度最大为 n^2 时，T(n) = O(n^2)， 则为平方阶；同样，当频度最大为 n^3 时，则为立方阶。对数阶示例i = 1;while (i &lt;= n) i = i*3;设循环体里面的基本语句的频度为 f(n)也就是执行了 f(n) 次 i*3所以执行完 i的值为 3^f(n)由于 i&lt;=n，所以 3^f(n) &lt;= n可得到 f(n) &lt;= log_3 n所以这个程序的时间复杂度为f(log3 n)最好、最坏、平均时间复杂度对于某些问题，算法的基本语句的频度不仅仅和问题的规模有关，还依赖于其他因素，例如：未知的输入值、随机的初始化等等。这些问题的算法，在计算时间复杂度的时候需要考虑各种情况。称算法在最好情况下的时间复杂度为最好时间复杂度；最坏情况下算法的时间复杂度为最坏时间复杂度，分别指的是算法计算量可能达到的最小值和最大值。算法的平均时间复杂度是指算法在所有情况下，按照输入实例以等概率出现时，算法计算量的加权平均值。一般来说，人们更关心的是平均情况下和最坏情况下的时间复杂度，但是算法的平均时间复杂度难以确定。渐进空间复杂度和时间复杂度类似，渐进空间复杂度(Space Complexity)作为算法所需存储空间的量度，它也是问题规模n的函数，记作S(n) = O(f(n))在分析时，输入数据所占的具体存储量取决于问题，和算法无关，所以秩序分析该算法在实现是所需要的辅助空间就行了。若算法实现时所需的辅助存储空间相对于输入数据量而言是个常数，与问题本身无关，则称这个算法为原地工作，辅助空间为O(1)。1234567891011121314151617示例：for(i=0;i&lt;n/2;i++)&#123; t = a[i]; a[i] = a[n-i-1]; a[n-i-1] = t;&#125;由于算法只需借助一个变量t，与问题规模n的大小无关，所以其空间复杂度为O(1)for(i=0;i&lt;n;i++) b[i] = a[n-i-1];for(i=0;i&lt;n/2;i++) a[i] = b[i];算法需要借助一个大小为n的辅助数组b，所以其空间复杂度为O(n)参考：人民邮电出版社《数据结构 C语言版|第二版》严蔚敏]]></content>
      <categories>
        <category>学习旅程</category>
      </categories>
      <tags>
        <tag>-编程学习 -数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python程序打包成exe可执行文件]]></title>
    <url>%2Farukione.github.io%2F2019%2F06%2F02%2Fpython%E7%A8%8B%E5%BA%8F%E6%89%93%E5%8C%85%E6%88%90exe%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[本教程是使用Pyinstaller来将Python程序打包成exe可执行文件实现步骤：首先要安装Pyinstaller包，在命令行窗口使用pip指令就可以完成：pip install pyinstaller安装成功后就可以进行打包了首先在命令行进入要打包的python程序的目录下面接着使用 pyinstaller file.py 就可以打包了(file.py是指你要打包的python文件)这个指令也可以附带其他属性：-F 表示生成单个可执行文件-D 创建一个目录，包含exe文件和依赖很多文件（默认选项）-w 表示去掉控制台窗口，这样执行exe文件的时候不会出现窗口，但会在后台运行，用命令行还是可以看见执行情况的-c 使用控制台，无界面(默认)；-p 表示你自己自定义需要加载的类路径-i 表示可执行文件的图标。例如我要生成一个带图标的exe文件，没有其他依赖文件的，那么就是使用指令：pyinstaller -F -i image.ico file.py （image.ico表示图标的路径，file.py表示要打包的python文件）打包后会生成dict文件夹和buid文件夹还有一个.spec文件，其中dict就是放置我们要的exe文件的文件夹，其他两个是生成exe文件的过程中的中间产物，可以删掉。pyinstaller打包的时候会自动把其他依赖的包和其他python文件引入，所以不用担心调用的问题。但是其他要使用到的文件并不会被添加进去，例如要使用的图片或者文档，所以要自己把文件添加到打包完的exe文件的目录下面相应的路径，否则会出现闪退或者文件执行失败。另外就是，如果py文件的编码是utf8，但是文件里面又有中文的话，那么使用windows的命令行打包会出现编码错误。解决的方法就是先使用chcp指令进入其他编码的命令行以下是几种常用的编码:GBK(一般情况下为默认编码) 936美国英语 437utf-8 65001在这里我们要使用utf-8的编码，所以使用命令:chcp 65001设置编码后再进行打包就不会出现编码错误的情况了最后就是，第一次打包出来的程序经常会出现各种问题，建议在命令行执行exe文件，这样可以看到报错的内容，以便结合情况解决问题。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[天翼校园网验证码识别]]></title>
    <url>%2Farukione.github.io%2F2019%2F05%2F25%2F%E5%A4%A9%E7%BF%BC%E6%A0%A1%E5%9B%AD%E7%BD%91%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB%2F</url>
    <content type="text"><![CDATA[本菜鸡能力有限，本文章主要目的是为了完成自动登录校园网，不是为了教学……依靠之前学的一个神经网络，尝试写一个识别天翼验证码的代码其实是为了破解那个不得不吐槽的校园网，不得不捣鼓的东西……如果不懂爬虫，神经网络的构造，梯度下降算法和反向传播算法，请先找资料学习相关知识，网上有很多讲解的文章，B站也有很多视频首先训练神经网络需要一点训练数据，而且，写的那个神经网络也不是靠深度学习框架的，所以识别的时候是采取分别识别验证码里面的4个数字的方式。幸好，天翼的验证码里的数字，非常简单，没有那些奇奇怪怪的加工，每个数字都是一样的，所以训练数据也不用那么多。写一个爬虫抓取一下验证码图片，然后把图片分割一下，就可以得到训练数据了。因为验证码里面的数字都长得一样，这里我每个数字就只用了10张图片来训练接下来是训练神经网络12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849class neuralNetwork(): # 初始化神经网络 def __init__(self): # 定义输入层节点数量 self.inputnodes = 13 * 9 # 定义隐藏层节点数量 self.hiddennodes = 300 # 定义输出层节点数量 self.outnodes = 10 # 随机初始化权重 self.input_hidden_weight = random.normal(0.0, pow(self.hiddennodes, -0.5), (self.hiddennodes, self.inputnodes)) self.hidden_out_weight = random.normal(0.0, pow(self.outnodes, -0.5), (self.outnodes, self.hiddennodes)) # 设置学习率 self.learning_rate = 0.1 # 定义激活函数 self.activation_function = lambda x: expit(x) def train(self, inputs, targets): """ :param inputs: 输入的图片数组 :param targets: 预测得到的结果 """ # 转化输入的数据 inputs = nparray(inputs, ndmin=2).T # 转化预测的数据 targets = nparray(targets, ndmin=2).T # 神经网络的识别结果 hidden_inputs = dot(self.input_hidden_weight, inputs) hidden_outputs = self.activation_function(hidden_inputs) out_inputs = dot(self.hidden_out_weight, hidden_outputs) final_outputs = self.activation_function(out_inputs) # 分配输出层、隐藏层的各节的损失值 out_error = targets - final_outputs hidden_error = dot(self.hidden_out_weight.T, out_error) # 更新权重 self.hidden_out_weight += self.learning_rate * dot((out_error * final_outputs * (1.0 - final_outputs)), hidden_outputs.T) self.input_hidden_weight += self.learning_rate * dot((hidden_error * hidden_outputs * (1.0 - hidden_outputs)), inputs.T) def query(self, inputs): inputs = nparray(inputs, ndmin=2).T hidden_inputs = dot(self.input_hidden_weight, inputs) hidden_outputs = self.activation_function(hidden_inputs) out_inputs = dot(self.hidden_out_weight, hidden_outputs) final_outputs = self.activation_function(out_inputs) max = argmax(final_outputs) return max用这个类代表神经网络，激活函数是使用sigmoid函数,这个函数在python里面已经内置在scipy库里面了，直接调用scipy.special的expit()函数就可以了query函数是神经网络识别图片函数，train函数是训练神经网络的函数，训练时用的算法是梯度下降和反向传播。把分割的数字图片转化为numpy数据传入train方法就可以对神经网络进行训练。权重更新方式使用梯度下降算法来获取更优的权重以下是图片的转化函数12345678910111213141516171819202122232425262728293031323334353637def get_data(image, select): """ 转化图片数据 :param image: 图片 :param select: 0代表输入整张验证码，返回4个数字的3维numpy数组 1代表输入一个数字，返回一个2维的numpy数组 :return: data or imdata """ if select == 0: # 分割图片 numdata = [] number = image.crop((7, 3, 55, 16)).convert('L') num1 = number.crop((0, 0, 9, 13)) num2 = number.crop((13, 0, 22, 13)) num3 = number.crop((26, 0, 35, 13)) num4 = number.crop((39, 0, 48, 13)) numlist = [num1, num2, num3, num4] for num in numlist: two = num.convert('1') array = nparray(two) list = array.tolist() data = [] for l in list: for i in l: data.append(i) numdata.append(data) data = nparray(numdata) * 0.89 + 0.1 return data if select == 1: two = image.convert('1') array = nparray(two) list = array.tolist() data = [] for l in list: for i in l: data.append(i) imdata = nparray(data) * 0.89 + 0.1 return imdata以下是我用到的训练函数12345678910111213141516def network_train(network): for ii in range(0, 11): for i in range(0, 10): image = Image.open(&quot;number/&quot; + str(i) + &quot;/&quot; + str(ii) + &quot;.jpg&quot;) inputs = get_data(image, 1) targes = zeros(10) + 0.1 targes[i] = 0.99 network.train(inputs, targes) try: os.remove(&apos;input_hidden_weight.txt&apos;) os.remove(&apos;hidden_out_weight.txt&apos;) print(&apos;重置权重文件&apos;) except: print(&apos;创建权重文件&apos;) savetxt(&quot;input_hidden_weight.txt&quot;, network.input_hidden_weight) savetxt(&quot;hidden_out_weight.txt&quot;, network.hidden_out_weight)因为这个验证码很简单，所以我没打算分测试数据，把全部图片训练完，这个神经网络就可以调用query方法来识别验证码了。为了不用每次识别验证码都训练一次，我在把训练出来的模型的权重保存在文件里面，以便以后直接拿文件里面的模型来用。代码文件、训练数据、模型权重文件，我都放在github里面github代码链接：https://github.com/arukione/verification-code/tree/master/%E5%A4%A9%E7%BF%BC%E6%A0%A1%E5%9B%AD%E7%BD%91%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL安装到登陆的问题]]></title>
    <url>%2Farukione.github.io%2F2019%2F04%2F08%2FMySQL%E5%AE%89%E8%A3%85%E5%88%B0%E7%99%BB%E9%99%86%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[经过一晚上的折腾，我终于登陆进数据库了！！这期间遇到了不少问题，虽然网上有很多解决方案，但要找到适用的真的不容易，每个问题都花了很长时间去尝试那些指令，绕了很多弯路才解决。端口冲突安装完遇到的第一个问题就是，没办法打开mysql服务，删了安装目录下的date文件夹重新用mysqld --initialize初始化，重新配置my.ini文件都没用。之后用mysqld --console查了错误信息发现了端口被占用了：[ERROR] Can’t start server: Bind on TCP/IP port: Address already in use[ERROR] Do you already have another mysqld server running on port: 3306 ?因为我这边的命令行无法识别netstat -nltp|grep mysql，到后面才用netstat -aon|findstr 3306查到了占用3306端口的进程，记住了进程后面的PID号，用taskkil /f /pid 对应的PID号把进程给杀了才解决问题无法登陆耗了一些时间后，我用net start mysql开启了数据库后，用mysql -uroot -密码尝试登陆，结果又报了一个这样的错误mysql: [ERROR] mysql: unknown option ‘-R’.于是用mysql -uroot -p后再输入密码,才知道原先输入密码前也要加个p，也就是mysql -uroot -p密码。但是接下来又报了一个错误mysql: [Warning] Using a password on the command line interface can be insecure.ERROR 1045 (28000): Access denied for user ‘root‘@’localhost’ (using password: YES)查了一下发现是密码错误，因为我输入的是安装时的密码，但是初始化的时候密码重置了，所以密码错了，所以我又绕了一次弯路，把date删了重新初始化了一遍，把初始化输出的临时密码记了下来[Note] A temporary password is generated for root@localhost: TKk51x#bOi0S之后就可以成功登陆了修改密码登陆后没办法使用其他语句，说是必须修改一下密码，而且自动生成的密码太难记了，我想改回自己的密码，但是在网上查了很多指令都用不成功，错误提示的ALTER USER语句也不知道怎么用，所以又上网馊了一下，还看了一下官方文档，总结就是看不懂【查到最后终于发现了一个可以用的语句alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;password&#39;;这下问题终于解决了，可以开始进一步学习了。虽然遇到了很多问题，但是也知道了很多MySQL和命令行的语句，有些没派上用场就是了，至少折腾了一夜一些有用的语句都变熟悉了。]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>windows命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的学习旅程]]></title>
    <url>%2Farukione.github.io%2F2019%2F04%2F04%2F%E6%88%91%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%97%85%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[2018年加强自己对计算机的认识，更深层地去理解计算机的工作原理从C语言开始认识程序接下来是自己买了服务器搭建梯子，第一次接触脚本慢慢的听到了许多自己没接触过的东西，例如github、node.js、还有前端啊，但是自己都不知道是什么东西自己买了前端的书学习，知道了如何构建网站参与了wiki的建设，发现了更多自己不知道的知识和vultr的客服交流，开启了服务器25号端口学习java，认识到了面向对象2019年访问了HackOne网站，开始对网络安全产生兴趣接触linux系统学习了github，明白了github的作用和使用方法接触python，发现python的优点购买了域名，尝试搭建博客初次使用git和githubDesktop，并搭建了自己的博客用githubDesktop给博客做备份学习linux系统和python、java，开始接触数据库学习数据库和python使用python写一个爬虫，借了数据库的书进行进一步学习和练习学习AI，入门机器学习第一次写了一个可以识别数字的神经网络学习python数据结构接触网络和使用刷入固件的路由器七月暑假开始使用ubuntu系统进一步学习机器学习算法，入门TensorFlow深度学习框架学习卷积神经网络结构(CNN)学习对抗神经网络（DCGAN）使用tesra平台，尝试在系统用GPU训练网络，结果安装驱动的时候把ubuntu系统搞坏了（呜呜呜）开始使用debian系统十月接触Python的web框架Django和Flask学习小程序开发参加蓝桥杯，选择Python语言比赛，参加学校培训进行部门小程序开发，使用Flask作为后端买了Nginx、Flask、操作系统概念、分布式系统概念与设计、Docker技术的书学习Nginx，用Nginx和uwsgi给flask搭建web服务学习ssl，为后端网站开启https继续学习Flask、Nginx，终于搞懂了KMP算法为了给部门小朋友讲课，制作PPT，了解到了许多包括android开发、node.js和前端框架等相关的知识第一次接开发单，了解到了一些让我震惊的事情，开始复习(预习)准备期末考]]></content>
      <categories>
        <category>学习旅程</category>
      </categories>
      <tags>
        <tag>编程学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习资源分享]]></title>
    <url>%2Farukione.github.io%2F2019%2F04%2F04%2F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB%2F</url>
    <content type="text"><![CDATA[我只想说虽然很有兴趣，但是学习深度学习太难了！！！所以在这里和大家分享点学习资源，希望能给学习机器学习、深度学习的小伙伴帮助。B站机器学习视频：上交ACM机器学习：https://www.bilibili.com/video/av58580135吴恩达（Ng）机器学习：https://www.bilibili.com/video/av9912938斯坦福 CS224n 自然语言处理：https://www.bilibili.com/video/av46216519ApacheCN学习组织：https://github.com/apachecn/AiLearning斯坦福 CS224n 自然语言处理中文笔记：https://github.com/apachecn/stanford-cs224n-notes-zh知乎卷积神经网络讲解：https://zhuanlan.zhihu.com/c_141391545神经网络&amp;CNN论文（需要翻墙）：http://cs231n.github.io/我把论文下载为压缩包，给国内的小伙伴们下载学习：maching learning.7z一个有点好玩、能帮助理解的数学可视化视频：深度学习（Deep Learning）：https://space.bilibili.com/88461692/channel/detail?cid=26587微积分：https://space.bilibili.com/88461692/channel/detail?cid=13407在B站的全部视频：https://space.bilibili.com/88461692?spm_id_from=333.788.b_765f7570696e666f.1]]></content>
      <categories>
        <category>学习旅程</category>
      </categories>
      <tags>
        <tag>-编程学习 -神经网络 -机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Hexo-NexT时遇到的问题]]></title>
    <url>%2Farukione.github.io%2F2019%2F03%2F29%2F%E4%BD%BF%E7%94%A8Hexo-NexT%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[部署到github显示的网页和本地测试的网页不一样之前设置了网页的背景图片还有側框的边角，同时添加了右上角的github跳转图标和阅读全文的设置。但是在在本地测试完，部署到github时，发现只有github图标和阅读全文的设置生效了，背景图片和边角设置没有体现出来。这是因为github部署的时候缓存加载比较慢，有时候要过一段时间才会显示出你想要的效果，用hexo clean清除一下public文件夹,再重新部署用hexo g -d部署一下，多刷新几次就行了。生成了空白的html文件第一次遇到这个问题的时候，我是直接重新搭建了这个博客的，毕竟一直不知道怎么解决，明明上一步操作还是没问题的，下一步页面突然就崩溃了。后来这个博客又遇到了一次，好在我找到了解决方法：如果找不到index.html文件（在生成的public文件夹里面）的话，要先用npm ls --depth 0检查一下插件情况,如果插件缺失了deploy和generator这两个插件的话就要用npm install重新安装插件。如果是有html文件，但文件是空白的。那么你就要检查你刚刚修改的配置了，如果你修改一个文件里某一个配置下的某一项，但那一个配置忘记打开的话就会导致这样的情况。例如我在主题配置文件里的友情链接links下增加了网易云音乐这一个选项，但是links前面原先有一个#号，我没有删除打开的话，生成的index.html文件就是空白的。而我就是遇到了这种情况，当时不知道是修改了哪一个配置，忘记把#号删了，结果就没有成功生成页面，发现了之后把#号删了就恢复正常了。hexo语句发生错误 Template render error: (unknown path)在我写完另外一篇文章后，打算测试一下，发现无论是hexo g还是hexo s都会报错，于是移除了那篇文章，重新尝试了一下发现可以了。在网上看到似乎不能用}}这样的符号，我回去看那篇文章时发现我有一个}误删了，这才的导致解析不通过。结合之前生成空白html的经历，我发现只要文件里面有一点语法错误都会出现很大问题，如果某次操作突然出错了，记得去检查你最近的修改和文章有没有语法错误。左下角多了一个undefined最新版本的看板娘，在layout/_layout.swig的&lt;/body&gt;前加上{ { live2d() } }，会产生一个默认的看板娘。如果在_config.yml文件中只设置一个，这就会产生冲突，导致有一个无法定义，所以会在页面多出一个undefined语句。在最新版本要把&lt;/body&gt;前的{ { live2d() } }删除，这样才不会出错。文件过大push不了更新404页面的时候，我这404里面插入了一个视频，然后在上传的时候发现github不支持超过100M的文件，所以我把视频删了，重新部署一遍博客。但每次部署都会继续上传我删掉的那个视频，为什么呢？我已经把404文件夹里面的视频删了，也把public文件夹里面的视频删了，我还检查了一遍.deploy_git下面的文件夹，都没发现那个视频了。上网重新查了一下hexo的部署方式才知道，执行hexo d，就会把这个public文件夹的东西完完整整拷贝到.deploy_git文件夹里。想起了之前部署失败，应该是.deploy_git文件夹里面还保留了之前没push的信息，才会导致现在也部署不了。解决方法就是执行hexo cl清除一下缓存，或者直接把.deploy_git文件夹删了，这样重新部署就没问题了。顺便一提，其实那个视频我还是插进去了，只不过用了另外一种方法…]]></content>
      <categories>
        <category>前端建设</category>
      </categories>
      <tags>
        <tag>博客建设</tag>
        <tag>Hexo-NexT</tag>
      </tags>
  </entry>
</search>
